package cgo

/*
#include "h/GoMdApi.h"
#include "h/GoTraderApi.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
*/
import "C"

import (
	"log"
	"strings"
	"sx98/ctp/conf"
	"sx98/ctp/ctp"
	"unsafe"
)

var mdapi *C.struct_MyCThostFtdcMdApi
var requestID C.int

//export GOOnFrontConnected
func GOOnFrontConnected() {
	log.Println("GOOnFrontConnected")

	p := AutoPointer{}

	reqUserLoginField := C.struct_CThostFtdcReqUserLoginField{}
	C.memset(unsafe.Pointer(&reqUserLoginField), 0, C.sizeof_struct_CThostFtdcReqUserLoginField)

	C.strcpy((*C.char)(&reqUserLoginField.BrokerID[0]), p.AddCString(conf.Config.User.BrokerID))

	C.strcpy((*C.char)(&reqUserLoginField.UserID[0]), p.AddCString(conf.Config.User.UserID))

	C.strcpy((*C.char)(&reqUserLoginField.Password[0]), p.AddCString(conf.Config.User.Password))

	requestID++
	C.CThostFtdcMdApi_ReqUserLogin(mdapi, &reqUserLoginField, requestID)
	log.Printf("CThostFtdcMdApi_ReqUserLogin BrokerID=%s, UserID=%s\n", conf.Config.User.BrokerID, conf.Config.User.UserID)

	p.ReleaseAll()
}

///当客户端与交易后台建立起通信连接时（还未登录前），该方法被调用。
//export GOOnFrontDisconnected
func GOOnFrontDisconnected(nReason C.int) {
	log.Printf("GOOnFrontDisconnected %d\n", int(nReason))
}

///当客户端与交易后台通信连接断开时，该方法被调用。当发生这个情况后，API会自动重新连接，客户端可不做处理。
///@param nReason 错误原因
///        0x1001 网络读失败
///        0x1002 网络写失败
///        0x2001 接收心跳超时
///        0x2002 发送心跳失败
///        0x2003 收到错误报文
//export GOOnHeartBeatWarning
func GOOnHeartBeatWarning(nTimeLapse C.int) {
	log.Printf("GOOnHeartBeatWarning %d\n", int(nTimeLapse))
}

var flagOnRspUserLogined bool

///心跳超时警告。当长时间未收到报文时，该方法被调用。
///@param nTimeLapse 距离上次接收报文的时间
//export GOOnRspUserLogin
func GOOnRspUserLogin(pRspUserLogin *C.struct_CThostFtdcRspUserLoginField, pRspInfo *C.struct_CThostFtdcRspInfoField, nRequestID C.int, bIsLast C.int) {
	log.Printf("GOOnRspUserLogin nRequestID=%d bIsLast=%d errorId=%d errorMsg=%s\n", int(nRequestID), int(bIsLast), int(pRspInfo.ErrorID), gbk2utf8(C.GoString(&pRspInfo.ErrorMsg[0])))

	flagOnRspUserLogined = true
	handleRegQuoteStk(rememberedRegQuoteStks)
	rememberedRegQuoteStks = ""
}

var rememberedRegQuoteStks string

func RegQuoteStk(stks string) {

	if stks == "" {
		return
	}

	if flagOnRspUserLogined == false {
		rememberedRegQuoteStks = stks
		return
	}

	handleRegQuoteStk(stks)
}

func handleRegQuoteStk(stkStrings string) {

	if stkStrings == "" {
		return
	}

	stks := strings.Split(stkStrings, ",")

	l := len(stks)

	if mdapi == nil || l == 0 {
		return
	}

	p := AutoPointer{}

	ppInstrumentID := make([]*C.char, l)

	for i := 0; i < l; i++ {
		ppInstrumentID[i] = p.AddCString(stks[i])
	}

	requestID++
	C.CThostFtdcMdApi_SubscribeForQuoteRsp(mdapi, &ppInstrumentID[0], C.int(l))
	log.Println("CThostFtdcMdApi_SubscribeForQuoteRsp")

	requestID++
	C.CThostFtdcMdApi_SubscribeMarketData(mdapi, &ppInstrumentID[0], C.int(l))
	log.Println("CThostFtdcMdApi_SubscribeMarketData")

	p.ReleaseAll()
}

///登录请求响应
//export GOOnRspUserLogout
func GOOnRspUserLogout(pUserLogout *C.struct_CThostFtdcUserLogoutField, pRspInfo *C.struct_CThostFtdcRspInfoField, nRequestID C.int, bIsLast C.int) {
	log.Printf("GOOnRspUserLogout nRequestID:%d bIsLast:%d", int(nRequestID), int(bIsLast))
	flagOnRspUserLogined = false
}

///登出请求响应
//export GOOnRspError
func GOOnRspError(pRspInfo *C.struct_CThostFtdcRspInfoField, nRequestID C.int, bIsLast C.int) {
	log.Printf("GOOnRspError nRequestID=%d bIsLast=%d errorId=%d errorMsg=%s\n", int(nRequestID), int(bIsLast), int(pRspInfo.ErrorID), gbk2utf8(C.GoString(&pRspInfo.ErrorMsg[0])))
}

///错误应答
//export GOOnRspSubMarketData
func GOOnRspSubMarketData(pSpecificInstrument *C.struct_CThostFtdcSpecificInstrumentField, pRspInfo *C.struct_CThostFtdcRspInfoField, nRequestID C.int, bIsLast C.int) {
	// var instrumentID string
	// if pSpecificInstrument != nil {
	// 	instrumentID = pSpecificInstrument.InstrumentID
	// }

	log.Printf("GOOnRspSubMarketData instrumentID=%s nRequestID:%d bIsLast:%d\n", C.GoString(&pSpecificInstrument.InstrumentID[0]), int(nRequestID), int(bIsLast))
}

///订阅行情应答
//export GOOnRspUnSubMarketData
func GOOnRspUnSubMarketData(pSpecificInstrument *C.struct_CThostFtdcSpecificInstrumentField, pRspInfo *C.struct_CThostFtdcRspInfoField, nRequestID C.int, bIsLast C.int) {
	log.Printf("GOOnRspUnSubMarketData instrumentID=%s nRequestID:%d bIsLast:%d errorId=%d errorMsg=%s\n", C.GoString(&pSpecificInstrument.InstrumentID[0]), int(nRequestID), int(bIsLast), int(pRspInfo.ErrorID), C.GoString(&pRspInfo.ErrorMsg[0]))
}

///取消订阅行情应答
//export GOOnRspSubForQuoteRsp
func GOOnRspSubForQuoteRsp(pSpecificInstrument *C.struct_CThostFtdcSpecificInstrumentField, pRspInfo *C.struct_CThostFtdcRspInfoField, nRequestID C.int, bIsLast C.int) {
	log.Printf("GOOnRspSubForQuoteRsp instrumentID=%s nRequestID=%d bIsLast=%d errorId=%d errorMsg=%s\n", C.GoString(&pSpecificInstrument.InstrumentID[0]), int(nRequestID), int(bIsLast), int(pRspInfo.ErrorID), C.GoString(&pRspInfo.ErrorMsg[0]))
}

///订阅询价应答
//export GOOnRspUnSubForQuoteRsp
func GOOnRspUnSubForQuoteRsp(pSpecificInstrument *C.struct_CThostFtdcSpecificInstrumentField, pRspInfo *C.struct_CThostFtdcRspInfoField, nRequestID C.int, bIsLast C.int) {
	log.Printf("GOOnRspUnSubForQuoteRsp nRequestID=%d bIsLast=%d errorId=%d errorMsg=%s\n", int(nRequestID), int(bIsLast), int(pRspInfo.ErrorID), C.GoString(&pRspInfo.ErrorMsg[0]))
}

//export GOOnRtnDepthMarketData
func GOOnRtnDepthMarketData(pDepthMarketData *C.struct_CThostFtdcDepthMarketDataField) {
	// log.Printf("GOOnRtnDepthMarketData TradingDay=%s InstrumentID=%s ExchangeID=%s ExchangeInstID=%s LastPrice=%g PreSettlementPrice=%g PreClosePrice=%g PreOpenInterest=%g OpenPrice=%g HighestPrice=%g LowestPrice=%g Volume=%d Turnover=%g OpenInterest=%g ClosePrice=%g SettlementPrice=%g UpperLimitPrice=%g LowerLimitPrice=%g PreDelta=%g CurrDelta=%g UpdateTime=%s UpdateMillisec=%d BidPrice1=%g BidVolume1=%d AskPrice1=%g AskVolume1=%d AskPrice2=%g AskVolume2=%d AskPrice3=%g AskVolume3=%d AskPrice4=%g AskVolume4=%d AskPrice5=%g AskVolume5=%d AveragePrice=%g ActionDay=%s\n",
	// 	C.GoString(&pDepthMarketData.TradingDay[0]),
	// 	C.GoString(&pDepthMarketData.InstrumentID[0]),
	// 	C.GoString(&pDepthMarketData.ExchangeID[0]),
	// 	C.GoString(&pDepthMarketData.ExchangeInstID[0]),
	// 	float64(pDepthMarketData.LastPrice),
	// 	float64(pDepthMarketData.PreSettlementPrice),
	// 	float64(pDepthMarketData.PreClosePrice),
	// 	float64(pDepthMarketData.PreOpenInterest),
	// 	float64(pDepthMarketData.OpenPrice),
	// 	float64(pDepthMarketData.HighestPrice),
	// 	float64(pDepthMarketData.LowestPrice),
	// 	int(pDepthMarketData.Volume),
	// 	float64(pDepthMarketData.Turnover),
	// 	float64(pDepthMarketData.OpenInterest),
	// 	float64(pDepthMarketData.ClosePrice),
	// 	float64(pDepthMarketData.SettlementPrice),
	// 	float64(pDepthMarketData.UpperLimitPrice),
	// 	float64(pDepthMarketData.LowerLimitPrice),
	// 	float64(pDepthMarketData.PreDelta),
	// 	float64(pDepthMarketData.CurrDelta),
	// 	C.GoString(&pDepthMarketData.UpdateTime[0]),
	// 	int(pDepthMarketData.UpdateMillisec),
	// 	float64(pDepthMarketData.BidPrice1),
	// 	int(pDepthMarketData.BidVolume1),
	// 	float64(pDepthMarketData.AskPrice1),
	// 	int(pDepthMarketData.AskVolume1),
	// 	float64(pDepthMarketData.BidPrice2),
	// 	int(pDepthMarketData.AskVolume2),
	// 	float64(pDepthMarketData.BidPrice3),
	// 	int(pDepthMarketData.AskVolume3),
	// 	float64(pDepthMarketData.BidPrice4),
	// 	int(pDepthMarketData.AskVolume4),
	// 	float64(pDepthMarketData.BidPrice5),
	// 	int(pDepthMarketData.AskVolume5),
	// 	float64(pDepthMarketData.AveragePrice),
	// 	C.GoString(&pDepthMarketData.ActionDay[0]))

	var r ctp.CThostFtdcDepthMarketDataField
	r.TradingDay = C.GoString(&pDepthMarketData.TradingDay[0])
	r.InstrumentID = C.GoString(&pDepthMarketData.InstrumentID[0])
	r.ExchangeID = C.GoString(&pDepthMarketData.ExchangeID[0])
	r.ExchangeInstID = C.GoString(&pDepthMarketData.ExchangeInstID[0])
	r.LastPrice = float64(pDepthMarketData.LastPrice)
	r.PreSettlementPrice = float64(pDepthMarketData.PreSettlementPrice)
	r.PreClosePrice = float64(pDepthMarketData.PreClosePrice)
	r.PreOpenInterest = float64(pDepthMarketData.PreOpenInterest)
	r.OpenPrice = float64(pDepthMarketData.OpenPrice)
	r.HighestPrice = float64(pDepthMarketData.HighestPrice)
	r.LowestPrice = float64(pDepthMarketData.LowestPrice)
	r.Volume = int(pDepthMarketData.Volume)
	r.Turnover = float64(pDepthMarketData.Turnover)
	r.OpenInterest = float64(pDepthMarketData.OpenInterest)
	r.ClosePrice = float64(pDepthMarketData.ClosePrice)
	r.SettlementPrice = float64(pDepthMarketData.SettlementPrice)
	r.UpperLimitPrice = float64(pDepthMarketData.UpperLimitPrice)
	r.LowerLimitPrice = float64(pDepthMarketData.LowerLimitPrice)
	r.PreDelta = float64(pDepthMarketData.PreDelta)
	r.CurrDelta = float64(pDepthMarketData.CurrDelta)
	r.UpdateTime = C.GoString(&pDepthMarketData.UpdateTime[0])
	r.UpdateMillisec = int(pDepthMarketData.UpdateMillisec)
	r.BidPrice1 = float64(pDepthMarketData.BidPrice1)
	r.BidVolume1 = int(pDepthMarketData.BidVolume1)
	r.AskPrice1 = float64(pDepthMarketData.AskPrice1)
	r.AskVolume1 = int(pDepthMarketData.AskVolume1)
	r.BidPrice2 = float64(pDepthMarketData.BidPrice2)
	r.AskVolume2 = int(pDepthMarketData.AskVolume2)
	r.BidPrice3 = float64(pDepthMarketData.BidPrice3)
	r.AskVolume3 = int(pDepthMarketData.AskVolume3)
	r.BidPrice4 = float64(pDepthMarketData.BidPrice4)
	r.AskVolume4 = int(pDepthMarketData.AskVolume4)
	r.BidPrice5 = float64(pDepthMarketData.BidPrice5)
	r.AskVolume5 = int(pDepthMarketData.AskVolume5)
	r.AveragePrice = float64(pDepthMarketData.AveragePrice)
	r.ActionDay = C.GoString(&pDepthMarketData.ActionDay[0])

	log.Printf("GOOnRtnDepthMarketData:%v\n", r)
}

//export GOOnRtnForQuoteRsp
func GOOnRtnForQuoteRsp(pForQuoteRsp *C.struct_CThostFtdcForQuoteRspField) {
	log.Println("GOOnRtnForQuoteRsp")
}

func CreateFtdcMdApi() *C.struct_MyCThostFtdcMdApi {

	pszFrontAddress := conf.Config.Hq.FrontAddress
	pszFlowPath := conf.Config.Data.Path
	bIsUsingUdp := conf.Config.Hq.IsUsingUDP
	bIsMulticast := conf.Config.Hq.IsMulticast

	p := AutoPointer{}

	log.Printf("CThostFtdcMdApi_CreateFtdcMdApi(pszFlowPath=%s, bIsUsingUdp=%d, bIsMulticast=%d)\n", pszFlowPath, bIsUsingUdp, bIsMulticast)
	mdapi = C.CThostFtdcMdApi_CreateFtdcMdApi(p.AddCString(pszFlowPath), C.int(bIsUsingUdp), C.int(bIsMulticast))

	log.Printf("createSpiResponse\n")
	spiResponse := C.CreateSpiResponse()

	log.Printf("CThostFtdcMdApi_RegisterSpi\n")
	C.CThostFtdcMdApi_RegisterSpi(mdapi, spiResponse)

	log.Printf("CThostFtdcMdApi_RegisterFront(FrontAddress=%s)\n", pszFrontAddress)
	C.CThostFtdcMdApi_RegisterFront(mdapi, p.AddCString(pszFrontAddress))

	log.Printf("CThostFtdcMdApi_Init()\n")
	C.CThostFtdcMdApi_Init(mdapi)

	// log.Printf("CThostFtdcMdApi_Join()\n")
	// C.CThostFtdcMdApi_Join(mdapi)

	p.ReleaseAll()

	return mdapi
}
